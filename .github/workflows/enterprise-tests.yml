name: Enterprise Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'sql/**'
      - 'enterprise/**'
      - '*.sql'
      - 'Makefile'
  pull_request:
    branches: [ main ]
    paths:
      - 'sql/**'
      - 'enterprise/**'
      - '*.sql'
      - 'Makefile'
  workflow_dispatch:

jobs:
  test-postgresql-versions:
    name: Test PostgreSQL ${{ matrix.postgres }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        postgres: [12, 13, 14, 15, 16]
    
    services:
      postgres:
        image: postgres:${{ matrix.postgres }}
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: pgv_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client-${{ matrix.postgres }}
        sudo update-alternatives --set psql /usr/lib/postgresql/${{ matrix.postgres }}/bin/psql

    - name: Install pgTAP
      run: |
        sudo apt-get install -y \
          build-essential \
          postgresql-server-dev-${{ matrix.postgres }} \
          git \
          make
        
        # Clone and install pgTAP
        git clone --depth 1 --branch v1.3.0 https://github.com/theory/pgtap.git
        cd pgtap
        make
        sudo make install
        cd ..
        rm -rf pgtap

    - name: Set up test database
      env:
        PGPASSWORD: postgres
        PGHOST: localhost
        PGUSER: postgres
        PGDATABASE: pgv_test
      run: |
        # Install required extensions
        psql -c "CREATE EXTENSION IF NOT EXISTS pgtap;"
        psql -c "CREATE EXTENSION IF NOT EXISTS pgcrypto;"

    - name: Build pg_gitversion
      run: |
        make clean
        make

    - name: Install pg_gitversion
      run: |
        sudo make install

    - name: Build enterprise edition
      run: |
        # Simulate license authorization for CI
        touch .enterprise_authorized
        make enterprise

    - name: Install enterprise edition
      run: |
        sudo make install-enterprise

    - name: Create extension
      env:
        PGPASSWORD: postgres
        PGHOST: localhost
        PGUSER: postgres
        PGDATABASE: pgv_test
      run: |
        psql -c "CREATE EXTENSION pg_gitversion;"
        
        # Verify enterprise build
        psql -c "SELECT EXISTS(SELECT 1 FROM pg_namespace WHERE nspname = 'gitversion_enterprise');"

    - name: Run enterprise tests
      env:
        PGPASSWORD: postgres
        PGHOST: localhost
        PGUSER: postgres
        PGDATABASE: pgv_test
      run: |
        # Create test results directory
        mkdir -p test-results
        
        # Run each test file
        for test in enterprise/tests/*.sql; do
          if [ -f "$test" ]; then
            echo "Running $(basename $test)..."
            if psql -f "$test" -v ON_ERROR_STOP=1 > "test-results/$(basename $test .sql).out" 2>&1; then
              echo "✅ $(basename $test) passed"
            else
              echo "❌ $(basename $test) failed"
              cat "test-results/$(basename $test .sql).out"
              exit 1
            fi
          fi
        done

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results-pg${{ matrix.postgres }}
        path: test-results/

  test-docker:
    name: Docker Test Environment
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Run Docker tests
      run: |
        cd enterprise/tests
        ./run_docker_tests.sh

    - name: Upload Docker test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: docker-test-results
        path: enterprise/tests/test-results/

  test-summary:
    name: Test Summary
    needs: [test-postgresql-versions, test-docker]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v3
      with:
        path: all-results/

    - name: Generate test summary
      run: |
        echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count total tests
        TOTAL_TESTS=0
        PASSED_TESTS=0
        
        for result_dir in all-results/*/; do
          if [ -d "$result_dir" ]; then
            echo "## $(basename $result_dir)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            for result_file in $result_dir/*.out; do
              if [ -f "$result_file" ]; then
                TEST_NAME=$(basename "$result_file" .out)
                
                if grep -q "^# Looks like you planned" "$result_file"; then
                  PLANNED=$(grep "^# Looks like you planned" "$result_file" | grep -oE "[0-9]+ test" | grep -oE "[0-9]+")
                  echo "- ✅ $TEST_NAME: $PLANNED tests passed" >> $GITHUB_STEP_SUMMARY
                  PASSED_TESTS=$((PASSED_TESTS + PLANNED))
                  TOTAL_TESTS=$((TOTAL_TESTS + PLANNED))
                elif grep -q "not ok" "$result_file"; then
                  FAILED=$(grep -c "not ok" "$result_file")
                  echo "- ❌ $TEST_NAME: $FAILED tests failed" >> $GITHUB_STEP_SUMMARY
                  TOTAL_TESTS=$((TOTAL_TESTS + FAILED))
                fi
              fi
            done
            
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "**Total Tests:** $TOTAL_TESTS" >> $GITHUB_STEP_SUMMARY
        echo "**Passed:** $PASSED_TESTS" >> $GITHUB_STEP_SUMMARY
        echo "**Failed:** $((TOTAL_TESTS - PASSED_TESTS))" >> $GITHUB_STEP_SUMMARY